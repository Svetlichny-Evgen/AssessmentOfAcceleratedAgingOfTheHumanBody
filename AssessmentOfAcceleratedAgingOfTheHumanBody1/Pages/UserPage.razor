@page "/account"
@using AssessmentOfAcceleratedAgingOfTheHumanBody1.Authentication
@using AssessmentOfAcceleratedAgingOfTheHumanBody1.DAL.Interfaces
@using AssessmentOfAcceleratedAgingOfTheHumanBody1.Models.User
@using AssessmentOfAcceleratedAgingOfTheHumanBody1.Enums
@using System.Security.Claims
@inject IJSRuntime js
@inject AuthService AuthService
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<IndexHeader> Logger
@inject IAccauntRepository AccountRepository
@inject IResultsRepository ResultsRepository



@if (userAuthenticated && currentUser != null)
{
    <div class="user-info">
        <h2>ІНФОРМАЦІЯ ПРО ОБЛІКОВИЙ ЗАПИС КОРИСТУВАЧА</h2>
        <br />
        <p><strong>ПІБ:</strong> @currentUser.FullName</p>
        <p><strong>Email:</strong> @currentUser.EMail</p>
        <p><strong>Дата народження:</strong> @currentUser.Birthday.ToShortDateString()</p>
        <p><strong>Стать:</strong> @(currentUser.Sex == Sex.Male ? "Чоловік" : "Жінка")</p>

        @if (isEditingPassword)
        {
            <EditForm Model="this" OnValidSubmit="ChangePassword">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <p>
                    <label for="newPassword"><strong>Новий пароль:</strong></label>
                    <InputText id="newPassword" @bind-Value="newPassword" type="password" />
                </p>
                <p>
                    <label for="confirmPassword"><strong>Повторити пароль:</strong></label>
                    <InputText id="confirmPassword" @bind-Value="confirmPassword" type="password" />
                </p>
                <button type="submit">Зберегти зміни</button>
                <button type="button" @onclick="CancelEditPassword">Відміна</button>
            </EditForm>
        }
        else
        {
            <div class="password-section">
                <div class="password-buttons">
                    <button @onclick="EditPassword">Змінити пароль</button>
                </div>
            </div>
        }
    </div>


    <br />
    <div class="results-form">
    <h2>Результати тестування</h2>
    <br />
    <select @onchange="FilterByDate">
        <option value="">Усі дати</option>
        @foreach (var date in testResults.Select(r => r.CreatedAt).Distinct().OrderByDescending(d => d))
        {
            <option value="@date">@date</option>
        }
    </select>

    @if (filteredResults.Any())
    {
        <table class="table">
            <tbody>
                @foreach (var result in filteredResults.OrderByDescending(r => r.CreatedAt))
                {
                    <tr>
                        <td>
                            <strong>Дата:</strong> @result.CreatedAt<br />
                            <strong>Індекс маси тіла:</strong> @result.BodyMassIndex<br />
                            <strong>Артеріальний тиск:</strong> @result.BloodPressure<br />
                            <strong>Обхват талії:</strong> @result.WaistCircumference<br />
                            <strong>Пульс:</strong> @result.HeartRate<br />
                            <strong>Тривалість сну:</strong> @result.SleepTime<br />
                            <strong>Циркадні ритми:</strong> @(result.CircadianRhythms ? "Дисинхроз є" : "Дисинхрозу немає")<br />
                            <strong>Кількість годин сидячи:</strong> @result.NumberOfHoursSitting<br />
                            <strong>Кількість викурних сигарет за добу:</strong> @result.NumberOfCigarettesSmokedPerDay<br />
                            <strong>Кількість випитого алкоголю на добу:</strong> @result.AmountOfAlcoholDrunkPerDay<br />
                            <strong>Кількість прийомів їжі:</strong> @result.NumberOfMeals<br />
                            <strong>Оцінка якості життя:</strong> @DetermineQualityOfLife(result.ResultsOfTheQualityOfLifeQuestionnaire)<br />
                            <strong>Оцінка ПТСР:</strong> @DeterminePTSR(result.ResultsOfThePTSDQuestionnaire)<br />
                            <strong>Діагностичний результат:</strong> @result.ResultOfDiagnostic<br />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <br />
        <p>Для обраної дати результатів немає.</p>
    }
    </div>
}

else
{
    <p>User is not authenticated</p>
}

@code {
    private AccountModel currentUser;
    private bool userAuthenticated;
    private bool isPasswordVisible = false;
    private bool isEditingPassword = false;
    private string newPassword;
    private string confirmPassword;
    private List<ResultsModel> filteredResults = new List<ResultsModel>();
    private List<ResultsModel> testResults = new List<ResultsModel>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var email = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
            if (email != null)
            {
                currentUser = AccountRepository.Select().FirstOrDefault(a => a.EMail == email);
                if (currentUser != null)
                {
                    testResults = ResultsRepository.Select().Where(a => a.AccauntId == currentUser).ToList();
                }
            }
            userAuthenticated = true;
        }
        else
        {
            userAuthenticated = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    private void EditPassword()
    {
        isEditingPassword = true;
    }

    private void CancelEditPassword()
    {
        isEditingPassword = false;
        newPassword = string.Empty;
        confirmPassword = string.Empty;
    }

    private async Task ChangePassword()
    {
        if (newPassword != confirmPassword)
        {
            await js.InvokeVoidAsync("alert", "Паролі не співпадають!");
            return;
        }

        currentUser.Password = PasswordHandler.EncodePassword(newPassword);
        AccountRepository.Update(currentUser);
        isEditingPassword = false;
        newPassword = string.Empty;
        confirmPassword = string.Empty;

        await js.InvokeVoidAsync("alert", "Пароль було змінено!");
    }

    private string DetermineQualityOfLife(int res)
    {
        if (res <= 12)
        {
            return "Високий рівень якості життя";
        }
        else if (res <= 20)
        {
            return "Середній рівень якості життя";
        }
        else
        {
            return "Низький рівень якості життя";
        }
    }

    private string DeterminePTSR(int res)
    {
        if (res > 4)
        {
            return "У вас є деякі проблеми. Зв'яжіться зі спеціалістом.";
        }
        else
        {
            return "Психічний стан в нормі.";
        }
    }

    private void FilterByDate(ChangeEventArgs e)
    {
        string selectedDate = e.Value.ToString();

        if (string.IsNullOrEmpty(selectedDate))
        {
            filteredResults.Clear();
        }
        else
        {
            filteredResults = testResults.Where(r => r.CreatedAt == selectedDate).OrderByDescending(r => r.CreatedAt).ToList();
        }
        StateHasChanged();
    }
}
