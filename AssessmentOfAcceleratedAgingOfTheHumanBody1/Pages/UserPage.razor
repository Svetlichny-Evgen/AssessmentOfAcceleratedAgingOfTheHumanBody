@page "/account"
@using AssessmentOfAcceleratedAgingOfTheHumanBody1.Authentication
@using AssessmentOfAcceleratedAgingOfTheHumanBody1.DAL.Interfaces
@using AssessmentOfAcceleratedAgingOfTheHumanBody1.Models.User
@using AssessmentOfAcceleratedAgingOfTheHumanBody1.Enums
@using System.Security.Claims
@inject IJSRuntime js
@inject AuthService AuthService
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<IndexHeader> Logger
@inject IAccauntRepository AccountRepository
@inject IResultsRepository ResultsRepository

<h3>Account Information</h3>

@if (userAuthenticated && currentUser != null)
{
    <div>
        <p><strong>Name:</strong> @currentUser.FullName</p>
        <p><strong>Email:</strong> @currentUser.EMail</p>
        <p><strong>Birthday:</strong> @currentUser.Birthday.ToShortDateString()</p>
        <p><strong>Sex:</strong> @(currentUser.Sex == Sex.Male ? "Мужчина" : "Женщина")</p>

        @if (isEditingPassword)
        {
            <EditForm Model="this" OnValidSubmit="ChangePassword">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <p>
                    <label for="newPassword"><strong>New Password:</strong></label>
                    <InputText id="newPassword" @bind-Value="newPassword" type="password" />
                </p>
                <p>
                    <label for="confirmPassword"><strong>Confirm Password:</strong></label>
                    <InputText id="confirmPassword" @bind-Value="confirmPassword" type="password" />
                </p>
                <button type="submit">Save Password</button>
                <button type="button" @onclick="CancelEditPassword">Cancel</button>
            </EditForm>
        }
        else
        {
            <p><strong>Password:</strong> @passwordDisplay</p>
            <button @onclick="TogglePasswordVisibility">@buttonText</button>
            <button @onclick="EditPassword">Change Password</button>
        }
    </div>
    <br />
    <h3>Tests Results</h3>

    <select @onchange="FilterByDate">
        <option value="">Все даты</option>
        @foreach (var date in testResults.Select(r => r.CreatedAt).Distinct().OrderByDescending(d => d))
        {
            <option value="@date">@date</option>
        }
    </select>

    @if (filteredResults.Any())
    {
        <table class="table">
            <tbody>
                @foreach (var result in filteredResults.OrderByDescending(r => r.CreatedAt))
                {
                    <tr>
                        <td>
                            <strong>Дата:</strong> @result.CreatedAt<br />
                            <strong>Индекс массы тела:</strong> @result.BodyMassIndex<br />
                            <strong>Кровяное давление:</strong> @result.BloodPressure<br />
                            <strong>Обхват талии:</strong> @result.WaistCircumference<br />
                            <strong>Пульс:</strong> @result.HeartRate<br />
                            <strong>Время сна:</strong> @result.SleepTime<br />
                            <strong>Циркадные ритмы:</strong> @(result.CircadianRhythms ? "Да" : "Нет")<br />
                            <strong>Часов сидячего образа жизни:</strong> @result.NumberOfHoursSitting<br />
                            <strong>Количество выкуриваемых сигарет в день:</strong> @result.NumberOfCigarettesSmokedPerDay<br />
                            <strong>Количество выпиваемого алкоголя в день:</strong> @result.AmountOfAlcoholDrunkPerDay<br />
                            <strong>Количество приемов пищи:</strong> @result.NumberOfMeals<br />
                            <strong>Оценка качества жизни:</strong> @DetermineQualityOfLife(result.ResultsOfTheQualityOfLifeQuestionnaire)<br />
                            <strong>Оценка ПТСР:</strong> @DeterminePTSR(result.ResultsOfThePTSDQuestionnaire)<br />
                            <strong>Диагностический результат:</strong> @result.ResultOfDiagnostic<br />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Нет результатов для выбранной даты.</p>
    }
}

else
{
    <p>User is not authenticated</p>
}

@code {
    private AccountModel currentUser;
    private bool userAuthenticated;
    private bool isPasswordVisible = false;
    private bool isEditingPassword = false;
    private string newPassword;
    private string confirmPassword;
    private string passwordDisplay => isPasswordVisible ? currentUser.Password : new string('*', currentUser.Password.Length);
    private string buttonText => isPasswordVisible ? "Hide Password" : "Show Password";
    private List<ResultsModel> filteredResults = new List<ResultsModel>();
    private List<ResultsModel> testResults = new List<ResultsModel>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var email = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
            if (email != null)
            {
                currentUser = AccountRepository.Select().FirstOrDefault(a => a.EMail == email);
                if (currentUser != null)
                {
                    testResults = ResultsRepository.Select().Where(a => a.AccauntId == currentUser).ToList();
                }
            }
            userAuthenticated = true;
        }
        else
        {
            userAuthenticated = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    private void EditPassword()
    {
        isEditingPassword = true;
    }

    private void CancelEditPassword()
    {
        isEditingPassword = false;
        newPassword = string.Empty;
        confirmPassword = string.Empty;
    }

    private async Task ChangePassword()
    {
        if (newPassword != confirmPassword)
        {
            await js.InvokeVoidAsync("alert", "Passwords do not match!");
            return;
        }

        currentUser.Password = newPassword;
        AccountRepository.Update(currentUser);
        isEditingPassword = false;
        newPassword = string.Empty;
        confirmPassword = string.Empty;
    }

    private string DetermineQualityOfLife(int res)
    {
        if (res <= 12)
        {
            return "High";
        }
        else if (res <= 20)
        {
            return "Medium";
        }
        else
        {
            return "Low";
        }
    }

    private string DeterminePTSR(int res)
    {
        if (res > 4)
        {
            return "You have some problems. Contact a specialist.";
        }
        else
        {
            return "Everything's normal.";
        }
    }

    private void FilterByDate(ChangeEventArgs e)
    {
        string selectedDate = e.Value.ToString();

        if (string.IsNullOrEmpty(selectedDate))
        {
            filteredResults.Clear();
        }
        else
        {
            filteredResults = testResults.Where(r => r.CreatedAt == selectedDate).OrderByDescending(r => r.CreatedAt).ToList();
        }
        StateHasChanged();
    }
}
